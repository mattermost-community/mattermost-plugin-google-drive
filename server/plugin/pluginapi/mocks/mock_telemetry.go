// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost/server/public/pluginapi/experimental/telemetry (interfaces: Tracker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	telemetry "github.com/mattermost/mattermost/server/public/pluginapi/experimental/telemetry"
)

// MockTracker is a mock of Tracker interface.
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker.
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance.
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// ReloadConfig mocks base method.
func (m *MockTracker) ReloadConfig(arg0 telemetry.TrackerConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReloadConfig", arg0)
}

// ReloadConfig indicates an expected call of ReloadConfig.
func (mr *MockTrackerMockRecorder) ReloadConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadConfig", reflect.TypeOf((*MockTracker)(nil).ReloadConfig), arg0)
}

// TrackEvent mocks base method.
func (m *MockTracker) TrackEvent(arg0 string, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackEvent indicates an expected call of TrackEvent.
func (mr *MockTrackerMockRecorder) TrackEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackEvent", reflect.TypeOf((*MockTracker)(nil).TrackEvent), arg0, arg1)
}

// TrackUserEvent mocks base method.
func (m *MockTracker) TrackUserEvent(arg0, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackUserEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackUserEvent indicates an expected call of TrackUserEvent.
func (mr *MockTrackerMockRecorder) TrackUserEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackUserEvent", reflect.TypeOf((*MockTracker)(nil).TrackUserEvent), arg0, arg1, arg2)
}
