// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost-community/mattermost-plugin-google-drive/server/plugin/pluginapi (interfaces: ClusterMutex)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClusterMutex is a mock of ClusterMutex interface.
type MockClusterMutex struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMutexMockRecorder
}

// MockClusterMutexMockRecorder is the mock recorder for MockClusterMutex.
type MockClusterMutexMockRecorder struct {
	mock *MockClusterMutex
}

// NewMockClusterMutex creates a new mock instance.
func NewMockClusterMutex(ctrl *gomock.Controller) *MockClusterMutex {
	mock := &MockClusterMutex{ctrl: ctrl}
	mock.recorder = &MockClusterMutexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterMutex) EXPECT() *MockClusterMutexMockRecorder {
	return m.recorder
}

// LockWithContext mocks base method.
func (m *MockClusterMutex) LockWithContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockWithContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockWithContext indicates an expected call of LockWithContext.
func (mr *MockClusterMutexMockRecorder) LockWithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockWithContext", reflect.TypeOf((*MockClusterMutex)(nil).LockWithContext), arg0)
}

// Unlock mocks base method.
func (m *MockClusterMutex) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockClusterMutexMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockClusterMutex)(nil).Unlock))
}
