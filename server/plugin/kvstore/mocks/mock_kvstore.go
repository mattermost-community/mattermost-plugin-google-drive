// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost-community/mattermost-plugin-google-drive/server/plugin/kvstore (interfaces: KVStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost-community/mattermost-plugin-google-drive/server/plugin/model"
)

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// DeleteGoogleUserToken mocks base method.
func (m *MockKVStore) DeleteGoogleUserToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGoogleUserToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGoogleUserToken indicates an expected call of DeleteGoogleUserToken.
func (mr *MockKVStoreMockRecorder) DeleteGoogleUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGoogleUserToken", reflect.TypeOf((*MockKVStore)(nil).DeleteGoogleUserToken), arg0)
}

// DeleteOAuthStateToken mocks base method.
func (m *MockKVStore) DeleteOAuthStateToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOAuthStateToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOAuthStateToken indicates an expected call of DeleteOAuthStateToken.
func (mr *MockKVStoreMockRecorder) DeleteOAuthStateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuthStateToken", reflect.TypeOf((*MockKVStore)(nil).DeleteOAuthStateToken), arg0)
}

// DeleteWatchChannelData mocks base method.
func (m *MockKVStore) DeleteWatchChannelData(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWatchChannelData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWatchChannelData indicates an expected call of DeleteWatchChannelData.
func (mr *MockKVStoreMockRecorder) DeleteWatchChannelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWatchChannelData", reflect.TypeOf((*MockKVStore)(nil).DeleteWatchChannelData), arg0)
}

// GetGoogleUserToken mocks base method.
func (m *MockKVStore) GetGoogleUserToken(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogleUserToken", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoogleUserToken indicates an expected call of GetGoogleUserToken.
func (mr *MockKVStoreMockRecorder) GetGoogleUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogleUserToken", reflect.TypeOf((*MockKVStore)(nil).GetGoogleUserToken), arg0)
}

// GetLastActivityForFile mocks base method.
func (m *MockKVStore) GetLastActivityForFile(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastActivityForFile", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastActivityForFile indicates an expected call of GetLastActivityForFile.
func (mr *MockKVStoreMockRecorder) GetLastActivityForFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastActivityForFile", reflect.TypeOf((*MockKVStore)(nil).GetLastActivityForFile), arg0, arg1)
}

// GetOAuthStateToken mocks base method.
func (m *MockKVStore) GetOAuthStateToken(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthStateToken", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthStateToken indicates an expected call of GetOAuthStateToken.
func (mr *MockKVStoreMockRecorder) GetOAuthStateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthStateToken", reflect.TypeOf((*MockKVStore)(nil).GetOAuthStateToken), arg0)
}

// GetProjectRateLimitExceeded mocks base method.
func (m *MockKVStore) GetProjectRateLimitExceeded(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRateLimitExceeded", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectRateLimitExceeded indicates an expected call of GetProjectRateLimitExceeded.
func (mr *MockKVStoreMockRecorder) GetProjectRateLimitExceeded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRateLimitExceeded", reflect.TypeOf((*MockKVStore)(nil).GetProjectRateLimitExceeded), arg0)
}

// GetUserRateLimitExceeded mocks base method.
func (m *MockKVStore) GetUserRateLimitExceeded(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRateLimitExceeded", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRateLimitExceeded indicates an expected call of GetUserRateLimitExceeded.
func (mr *MockKVStoreMockRecorder) GetUserRateLimitExceeded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRateLimitExceeded", reflect.TypeOf((*MockKVStore)(nil).GetUserRateLimitExceeded), arg0, arg1)
}

// GetWatchChannelData mocks base method.
func (m *MockKVStore) GetWatchChannelData(arg0 string) (*model.WatchChannelData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchChannelData", arg0)
	ret0, _ := ret[0].(*model.WatchChannelData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchChannelData indicates an expected call of GetWatchChannelData.
func (mr *MockKVStoreMockRecorder) GetWatchChannelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchChannelData", reflect.TypeOf((*MockKVStore)(nil).GetWatchChannelData), arg0)
}

// GetWatchChannelDataUsingKey mocks base method.
func (m *MockKVStore) GetWatchChannelDataUsingKey(arg0 string) (*model.WatchChannelData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchChannelDataUsingKey", arg0)
	ret0, _ := ret[0].(*model.WatchChannelData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchChannelDataUsingKey indicates an expected call of GetWatchChannelDataUsingKey.
func (mr *MockKVStoreMockRecorder) GetWatchChannelDataUsingKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchChannelDataUsingKey", reflect.TypeOf((*MockKVStore)(nil).GetWatchChannelDataUsingKey), arg0)
}

// ListWatchChannelDataKeys mocks base method.
func (m *MockKVStore) ListWatchChannelDataKeys(arg0, arg1 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatchChannelDataKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWatchChannelDataKeys indicates an expected call of ListWatchChannelDataKeys.
func (mr *MockKVStoreMockRecorder) ListWatchChannelDataKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatchChannelDataKeys", reflect.TypeOf((*MockKVStore)(nil).ListWatchChannelDataKeys), arg0, arg1)
}

// StoreGoogleUserToken mocks base method.
func (m *MockKVStore) StoreGoogleUserToken(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGoogleUserToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreGoogleUserToken indicates an expected call of StoreGoogleUserToken.
func (mr *MockKVStoreMockRecorder) StoreGoogleUserToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGoogleUserToken", reflect.TypeOf((*MockKVStore)(nil).StoreGoogleUserToken), arg0, arg1)
}

// StoreLastActivityForFile mocks base method.
func (m *MockKVStore) StoreLastActivityForFile(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLastActivityForFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLastActivityForFile indicates an expected call of StoreLastActivityForFile.
func (mr *MockKVStoreMockRecorder) StoreLastActivityForFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLastActivityForFile", reflect.TypeOf((*MockKVStore)(nil).StoreLastActivityForFile), arg0, arg1, arg2)
}

// StoreOAuthStateToken mocks base method.
func (m *MockKVStore) StoreOAuthStateToken(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOAuthStateToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOAuthStateToken indicates an expected call of StoreOAuthStateToken.
func (mr *MockKVStoreMockRecorder) StoreOAuthStateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOAuthStateToken", reflect.TypeOf((*MockKVStore)(nil).StoreOAuthStateToken), arg0, arg1)
}

// StoreProjectRateLimitExceeded mocks base method.
func (m *MockKVStore) StoreProjectRateLimitExceeded(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreProjectRateLimitExceeded", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreProjectRateLimitExceeded indicates an expected call of StoreProjectRateLimitExceeded.
func (mr *MockKVStoreMockRecorder) StoreProjectRateLimitExceeded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProjectRateLimitExceeded", reflect.TypeOf((*MockKVStore)(nil).StoreProjectRateLimitExceeded), arg0)
}

// StoreUserRateLimitExceeded mocks base method.
func (m *MockKVStore) StoreUserRateLimitExceeded(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUserRateLimitExceeded", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUserRateLimitExceeded indicates an expected call of StoreUserRateLimitExceeded.
func (mr *MockKVStoreMockRecorder) StoreUserRateLimitExceeded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUserRateLimitExceeded", reflect.TypeOf((*MockKVStore)(nil).StoreUserRateLimitExceeded), arg0, arg1)
}

// StoreWatchChannelData mocks base method.
func (m *MockKVStore) StoreWatchChannelData(arg0 string, arg1 model.WatchChannelData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWatchChannelData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreWatchChannelData indicates an expected call of StoreWatchChannelData.
func (mr *MockKVStoreMockRecorder) StoreWatchChannelData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWatchChannelData", reflect.TypeOf((*MockKVStore)(nil).StoreWatchChannelData), arg0, arg1)
}
